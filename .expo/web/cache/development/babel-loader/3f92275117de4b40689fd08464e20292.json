{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"D:\\\\Documents\\\\Projects\\\\react-native-learning\\\\src\\\\screens\\\\SquareScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ColorCounter from \"../components/ColorCounter\";\nvar COLOR_INCREMENT = 15;\n\nvar reducer = function reducer(state, action) {\n  switch (action.colorToChange) {\n    case \"red\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        red: state.red + action.amount\n      });\n\n    case \"green\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        green: state.green + action.amount\n      });\n\n    case \"blue\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar SquareScreen = function SquareScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      runMyReducer = _useReducer2[1];\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return runMyReducer({\n        colorToChange: \"red\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return runMyReducer({\n        colorToChange: \"red\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return runMyReducer({\n        colorToChange: \"blue\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return runMyReducer({\n        colorToChange: \"blue\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return runMyReducer({\n        colorToChange: \"green\",\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return runMyReducer({\n        colorToChange: \"green\",\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 150,\n      width: 150,\n      backgroundColor: \"rgb(\" + state.red + \", \" + state.green + \", \" + state.blue + \")\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({});\nexport default SquareScreen;","map":{"version":3,"sources":["D:/Documents/Projects/react-native-learning/src/screens/SquareScreen.js"],"names":["React","useReducer","ColorCounter","COLOR_INCREMENT","reducer","state","action","colorToChange","red","amount","green","blue","SquareScreen","runMyReducer","height","width","backgroundColor","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport { View, Text, StyleSheet } from \"react-native\";\r\nimport ColorCounter from \"../components/ColorCounter\";\r\n\r\nconst COLOR_INCREMENT = 15;\r\n\r\nconst reducer = (state, action) => {\r\n  //state === {red:number,green:number,blue:number};\r\n  //action === {colorToChange: 'red' || 'green' || 'blue', amount: 15 || 15}\r\n\r\n  switch (action.colorToChange) {\r\n    case \"red\":\r\n      return { ...state, red: state.red + action.amount };\r\n    case \"green\":\r\n      return { ...state, green: state.green + action.amount };\r\n    case \"blue\":\r\n      return { ...state, blue: state.blue + action.amount };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst SquareScreen = () => {\r\n  const [state, runMyReducer] = useReducer(reducer, {\r\n    red: 0,\r\n    green: 0,\r\n    blue: 0,\r\n  });\r\n  // const { red, green, blue } = state;\r\n\r\n  return (\r\n    <View>\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          runMyReducer({ colorToChange: \"red\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          runMyReducer({ colorToChange: \"red\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Red\"\r\n      />\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          runMyReducer({ colorToChange: \"blue\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          runMyReducer({ colorToChange: \"blue\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Blue\"\r\n      />\r\n      <ColorCounter\r\n        onIncrease={() =>\r\n          runMyReducer({ colorToChange: \"green\", amount: COLOR_INCREMENT })\r\n        }\r\n        onDecrease={() =>\r\n          runMyReducer({ colorToChange: \"green\", amount: -1 * COLOR_INCREMENT })\r\n        }\r\n        color=\"Green\"\r\n      />\r\n      <View\r\n        style={{\r\n          height: 150,\r\n          width: 150,\r\n          backgroundColor: `rgb(${state.red}, ${state.green}, ${state.blue})`,\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({});\r\n\r\nexport default SquareScreen;\r\n"]},"metadata":{},"sourceType":"module"}